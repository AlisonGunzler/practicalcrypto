"""Solution to Assignment 3.

Python version 3.9 or later.

Your final submission must contain the following functions:
    - brute_force_dl(mod, gen, order, target)
    - baby_step_giant_step_dl(mod, gen, order, target):
    - crt(vals, mods)
    - pohlig_hellman(mod, gen, factors, target)
    - elgamal_attack(params, pk)
"""


import math

import numpy as np


def brute_force_dl(mod, gen, order, target):
    """Uses brute force to compute discrete log of target with respect to gen.

    Parameters:
        mod (int): The prime modulus over which computation is carried out.
        gen (int): An element of Z*_mod.
        order (int): The order of the subgroup generated by gen.
        target (int): The element whose discrete log is to be computed.

    Returns:
        int: The discrete log of target with respect to gen.
    """

    for i in range(order) :
        if(pow(gen,i,mod) == target) :
            return i

    return 0

def find_inverse (g, n):
    for i in range(n) :
        if (g*i) % n == 1:
            return i
    return pow(g,n-2,n) #TODO fix

def baby_step_giant_step_dl(mod, gen, order, target):
    """Uses the baby step giant step algorithm to compute discrete log of
    target with respect to gen.

    Parameters:
        mod (int): The prime modulus over which computation is carried out.
        gen (int): An element of Z*_mod.
        order (int): The order of the subgroup generated by gen.
        target (int): The element whose discrete log is to be computed.

    Returns:
        int: The discrete log of target with respect to gen.
    """

    m = int(math.sqrt(order-1))

    table_o = np.zeros([m, 2], dtype=int)

    # Generate table
    for i in range(m) :
        table_o[i][0] = i
        table_o[i][1] = pow(gen,i,mod)

    # Sort table
    sorted_table_o = table_o[table_o[:,1].argsort()]

    gen_inverse = find_inverse(gen, mod)

    for q in range(m) :
        gqm = pow(gen_inverse,m*q,mod)
        ygqm = target * pow(gen_inverse,m*q,mod)
        index = np.searchsorted(sorted_table_o[:,1], ygqm)
        if(index > -1) :
            print(index)
            r = sorted_table_o[index-1][0]
            return q*m + r

    return 0


def crt(vals, mods):
    """Solves a system of congruences.

    Parameters:
        vals (list(int)): A list of values.
        mods (list(int)): A list of moduli which are pairwise coprime i.e., mod[i] and mod[j] are
            coprime for any i ≠ j. The length of this list is equal to that of vals.

    Returns:
        int: An integer z such that for every i in {0, .., len(vals) - 1}, z ≡ vals[i] mod mods[i].
    """

    M = math.prod(mods)
    n = len(mods)
    

    sum = 0
    for i in range(n) :
        mi = mods[i]
        bi = int(M / mi)
        bi_inv = find_inverse(bi, mi)
        ai = vals[i]

        sum += (ai*bi*bi_inv) 


    return sum % M


def pohlig_hellman(mod, gen, factors, target):
    """Uses the Pohlig-Hellman algorithm to compute discrete log of target with
    respect to gen, given the factorization of the order of the subgroup
    generated by gen.

    Parameters:
        mod (int): The prime modulus over which computation is carried out.
        gen (int): An element of Z*_mod.
        factors (list(int, int)): A list of values [(p_1, e_1), ..., (p_n, e_n)] such that the order
            of the subgroup generated by gen is p_1^{e_1} * ... * p_n^{e_n}.
        target (int): The element whose discrete log is to be computed.

    Returns:
        int: The discrete log of target with respect to gen.
    """
    return 0


def elgamal_attack(params, pk):
    """
    Given an ElGamal public key in Z*_mod, where mod is prime, recovers the corresponding secret
    key when mod - 1 has sufficiently many 'small' prime factors.

    Parameters:
        params (Params): ElGamal parameters. It is an instance of the Params class defined in
            problem.py.
        pk (int): The ElGamal public key. It is guaranteed that the corresponding secret key is
            less than params.exp_bound.

    Returns:
        int: The discrete log of pk with respect to gen.
    """
    return 0
